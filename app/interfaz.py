# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread

import sys
from PIL import Image , ImageTk
import cv2
import imutils
from FuncionHigieneManos import *
import numpy as np


def HigieneManos(frame):
    global presente
    
    with mp_hands.Hands(model_complexity=0, min_detection_confidence=0.5, min_tracking_confidence=0.5, max_num_hands = 2, ) as hands:
            
        frame = cv2.flip(frame, -1)
        results = hands.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

        if results.multi_hand_landmarks:
            tiempo_inicio = time.time()*10

            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(frame,hand_landmarks,
                    mp_hands.HAND_CONNECTIONS,mp_drawing.DrawingSpec(color=(0,255,255), thickness=2, circle_radius=3),
                    mp_drawing.DrawingSpec(color=(255,0,255), thickness=2, circle_radius=3))

                # verificar primero la cantidad de landmarks
            if len(results.multi_hand_landmarks) == 1:
                variable =results.multi_handedness[0].classification[0].label
            elif len(results.multi_hand_landmarks) == 2:
                variable = 'Both'
            else:
                variable = None

                #try:
            if variable =="Left":
                mano_dere_row = np.zeros(63)
                mano_izq_row = np.array([[landmark.x, landmark.y,landmark.z] for landmark in results.multi_hand_landmarks[0].landmark]).flatten()
            elif variable == "Right":
                mano_izq_row = np.zeros(63)
                mano_dere_row = np.array([[landmark.x, landmark.y, landmark.z] for landmark in results.multi_hand_landmarks[0].landmark]).flatten()
            elif variable == "Both":
                mano_dere_row = np.array([[landmark.x, landmark.y,landmark.z] for landmark in results.multi_hand_landmarks[0].landmark]).flatten()
                mano_izq_row = np.array([[landmark.x, landmark.y, landmark.z] for landmark in results.multi_hand_landmarks[1].landmark]).flatten()
            else:
                print('Error, se reconocen mas de dos manos')
                
            rows = np.concatenate((mano_dere_row,mano_izq_row))
            hand_language_class = model.predict(rows.reshape(1,-1))[0]
            prueba = hand_language_class
            cv2.rectangle(frame, (0,0), (250, 60), (245, 117, 16), -1)

            cv2.putText(frame, 'CLASS', (95,12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
            cv2.putText(frame, str(hand_language_class)
                            , (90,40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)

                #     # Display Probability
            cv2.putText(frame, 'Time'
                            , (15,12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
            end = time.time() *10
            presente=presente +(end-tiempo_inicio)
            #print(presente)
            cv2.putText(frame, str(round(presente,1))
                                , (10,40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
            for i  in id_pasos:
                #print(i)
                if hand_language_class == i:
                    time_pasos[i-1]= time_pasos[i-1] +(end - tiempo_inicio)
    #return cv2.flip(frame, -1)
    return frame

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def start(self, priority=QThread.Priority.InheritPriority):
        self._run_flag = True
        return super().start(priority)

    def run(self):
        # capture from web cam
        #cap = cv2.VideoCapture(r'C:\Users\Andres Romero\Documents\Proyectos\hands_detection\scripts\Manos_Completo.mp4')
        cap = cv2.VideoCapture(1)
        while self._run_flag:
            ret, cv_img = cap.read()
            if ret:
                self.change_pixmap_signal.emit(HigieneManos(cv_img))
        # shut down capture system
        cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class interfaz(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("Form")
        self.resize(922, 791)
        self.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.setStyleSheet("background-color:rgb(243, 184, 184)")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalWidget = QtWidgets.QWidget(self)
        self.verticalWidget.setObjectName("verticalWidget")
        self.verticalLayoutImagen = QtWidgets.QVBoxLayout(self.verticalWidget)
        self.verticalLayoutImagen.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayoutImagen.setObjectName("verticalLayoutImagen")
        self.horizontalWidgetHeader = QtWidgets.QWidget(self.verticalWidget)
        self.horizontalWidgetHeader.setStyleSheet("background-color: rgb(206, 42, 41)")
        self.horizontalWidgetHeader.setObjectName("horizontalWidgetHeader")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalWidgetHeader)
        self.horizontalLayout.setContentsMargins(5, 0, 5, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.horizontalWidgetHeader)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setText("")

        # Imagen Shaio
        image=QtGui.QPixmap("logo_shaio.png")
        self.label_2.setPixmap(image.scaled(140, 140, QtCore.Qt.KeepAspectRatio))
        self.label_2.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.horizontalWidgetHeader)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setStyleSheet("color:white")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.label_3 = QtWidgets.QLabel(self.horizontalWidgetHeader)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.verticalLayoutImagen.addWidget(self.horizontalWidgetHeader)
        self.verticalLayout_2.addWidget(self.verticalWidget)
        self.image_label = QtWidgets.QLabel(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.image_label.sizePolicy().hasHeightForWidth())
        self.image_label.setSizePolicy(sizePolicy)
        self.image_label.setMinimumSize(QtCore.QSize(600, 300))
        self.image_label.setStyleSheet("background-color:white; \n"
"border-width:3px;\n"
"border-color:rgb(0, 0, 0); \n"
"border-style:inset;")
        self.image_label.setText("")
        self.image_label.setObjectName("image_label")
        self.image_label.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_2.addWidget(self.image_label)
        self.horizontalLayoutButtons = QtWidgets.QHBoxLayout()
        self.horizontalLayoutButtons.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayoutButtons.setContentsMargins(10, 10, 10, 10)
        self.horizontalLayoutButtons.setSpacing(10)
        self.horizontalLayoutButtons.setObjectName("horizontalLayoutButtons")
        self.pushButton_2 = QtWidgets.QPushButton(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color:rgb(206, 42, 41); color:white")
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayoutButtons.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color:rgb(206, 42, 41); color: white")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayoutButtons.addWidget(self.pushButton)
        self.verticalLayout_2.addLayout(self.horizontalLayoutButtons)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)


        self.pushButton_2.clicked.connect(self.start_stop_model)
        self.pushButton_2_state = True #true para empezar, false para detener
        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
       
        self.i_width=self.image_label.sizeHint().width()
        self.i_height=self.image_label.sizeHint().height()

    def start_stop_model(self):
        if self.pushButton_2_state:
            self.thread.start()
            self.pushButton_2.setText("Detener")
            self.pushButton_2_state = False
        else:
            self.thread.stop()
            self.pushButton_2.setText("Empezar")
            self.pushButton_2_state = True

    # Sobreescibe la funcion
    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    # Sobreescribe la funcion
    def resizeEvent(self, event):
        self.i_width=self.image_label.width()
        self.i_height=self.image_label.height()
        #print(self.i_width, '....', self.i_height)
        QtWidgets.QWidget.resizeEvent(self, event)

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        #p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        p = convert_to_Qt_format.scaled(self.i_width, self.i_height, Qt.KeepAspectRatio)
        return QtGui.QPixmap.fromImage(p)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Higene de Manos"))
        self.label.setText(_translate("Form", "Higene de Manos"))
        self.label_3.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; color:#ffffff;\">Exploratorium </span></p><p align=\"center\"><span style=\" font-size:16pt; color:#ffffff;\">Shaio</span></p></body></html>"))
        self.pushButton_2.setText(_translate("Form", "Empezar"))
        self.pushButton.setText(_translate("Form", "Guardar"))

if __name__=="__main__":
    app = QtWidgets.QApplication(sys.argv)
    a = interfaz()
    a.show()
    sys.exit(app.exec_())
    
